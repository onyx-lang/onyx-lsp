
use core

port := 0;

comm_socket: net.Socket;
comm_reader: io.Reader;
comm_writer: io.Writer;
json_rpc_handler: json_rpc.Context;

setup_jsonrpc :: () {
    json_rpc_handler = json_rpc.handler();

    json_rpc_handler->set_metadata("onyx-lsp", "Onyx Language Server", "0.0.1");
    json_rpc_handler->collect_methods(.[package main]);
    json_rpc_handler->enable_openrpc_discovery();
}

process_incoming_message :: () {
    length := 0;
    while true {
        line := comm_reader->read_line(consume_newline=true, inplace=true);
        if line == "" do return;
        if line == "\r\n" do break;

        key, value := string.bisect(line, #char ":");
        switch string.to_lowercase(key) {
            case "content-length" {
                length = ~~(value
                      |> string.strip_whitespace()
                      |> conv.parse_int());
            }

            case "content-type" ---

            case #default do assert(false, "Unknown header");
        }
    }

    if length == 0 do return;

    log(.Debug, tprintf("Message is {} bytes.", length));
    message := make([] u8, length); 
    defer delete(^message);

    bytes_read, err := comm_reader->read_bytes(message);
    if err == .ReadPending do return;

    json_rpc_handler->handle(message);
}

listen_loop :: () {
    while !comm_reader.done {
        alloc.clear_temp_allocator();
        log(.Debug, "Waiting for message...");

        if port > 0 {
            change_buffer: [1] net.Socket_Poll_Status;
            net.socket_poll_all(.[ ^comm_socket ], -1, change_buffer);

            if change_buffer[0] == .Closed {
                break;
            }

            if change_buffer[0] == .Readable {
                while #bottom_test io.reader_get_buffered(^comm_reader) != 0 {
                    process_incoming_message();
                }
            }

        } else {
            process_incoming_message();
        }
    }
}

main :: (args) => {
    default_log_level(.Critical);
    random.set_seed(os.time());

    if string.starts_with(args[1] |> string.as_str(), "--port") {
        _, port_str := string.bisect(args[1] |> string.as_str(), #char "=");
        port = ~~ conv.parse_int(port_str);
    }

    setup_jsonrpc();

    if port > 0 {
        // Create a TCP socket
        listen_socket, _ := net.socket_create(.Inet, .Stream);
        defer listen_socket->close();

        listen_socket->setting(.ReuseAddress, 1);

        listen_addr: net.Socket_Address;
        net.make_ipv4_address(^listen_addr, 0, ~~ port);
        listen_socket->bind(^listen_addr);

        log(.Info, tprintf("Listening on port {}", port));
        listen_socket->listen();

        socket_addr: #auto;
        comm_socket, socket_addr = listen_socket->accept();
        defer comm_socket->close();

        comm_socket->setting(.NonBlocking, 1);

        comm_reader = io.reader_make(^comm_socket);
        comm_writer = io.writer_make(^comm_socket, 0);
    
    } else {
        // When a way to poll standard input is available,
        // this should be used and the `stdin = true` should
        // be removed.
        // runtime.fs.__enable_non_blocking_stdin();
        
        comm_reader = io.reader_make(^stdio_stream);
        comm_writer = stdio.print_writer;

        comm_reader.stdin = true;
    }

    json_rpc_handler->set_output_callback(^comm_writer, (w: ^io.Writer, msg: str) => {
        io.write_format(w, "Content-Length: {}\r\n", msg.length);
        io.write(w, "\r\n");
        io.write(w, msg);
        __flush_stdio();
    });

    listen_loop();
}

