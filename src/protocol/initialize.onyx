
use core {package, eprintf, os}
use json_rpc {
    Method,
    Context,
    Status,
    Notification
}

InitializeRequest :: struct {
    capabilities: ClientCapabilities;

    rootPath: str;
}

ClientCapabilities :: struct {
    textDocument: struct {
        publishDiagnostics: struct {
            relatedInformation: bool;
            tagSupport: struct {
                valueSet: [] i32;
            }
        }
    };
}

InitializeResult :: struct {
    capabilities: ServerCapabilities;

    serverInfo: struct {
        name: str;
        version: str;
    };
}

ServerCapabilities :: struct {
    positionEncoding: str;

    textDocumentSync: struct {
        openClose: bool;
        change: i32;
        save: bool;
    };

    referencesProvider: bool;

    definitionProvider: bool;

    hoverProvider: bool;
}

@Method.{"initialize"}
(c: ^Context, in: ^InitializeRequest, out: ^InitializeResult) -> Status {
    log(.Info, core.tprintf("Client has capabilties: {*p}", ^in.capabilities));
    log(.Info, core.tprintf("Client is in folder: {}", in.rootPath));

    if !load_config(in.rootPath) {
        eprintf("Failed to open config file 'onyx-lsp.ini', using defaults.\n");
    }

    out.capabilities = .{
        positionEncoding = "utf-16",
        textDocumentSync = .{
            openClose = false,
            change = 0,
            save = true
        },
        definitionProvider = true,
        referencesProvider = true,
        hoverProvider = true
    };

    out.serverInfo = .{
        name = "onyx-lsp",
        version = "0.0.1"
    };

    return .Success;
}

@Notification.{"initialized"}
(c: ^Context, _: ^void) {
    log(.Info, "Successfully initialized");

    //
    // If this is a project, update all diagnostics and symbol information
    // right away, instead of waiting for a file to be saved.
    if global_config.lsp.mode == "project" {
        update_diagnostics(c, "");
    }
}
