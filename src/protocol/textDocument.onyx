use core {string, array}
use core {tprintf, aprintf}
use json_rpc {
    Method,
    Context,
    Status,
    Notification
}

OnyxFile :: struct {
    uri: str;
    errors: [..] CompilationError;
    previously_had_errors: bool;
}

#local
known_files: [..] OnyxFile;


TextDocumentItem :: struct {
    textDocument: struct {
        uri: str;
        languageId: str;
    };
}

@Notification.{"textDocument/didOpen"}
(c: ^Context, item: ^TextDocumentItem) {
    // :Config ??
    if item.textDocument.languageId != "onyx" do return;

    if !array.contains(known_files, #(it.uri == item.textDocument.uri)) {
        known_files << .{ string.alloc_copy(item.textDocument.uri) };
    }
}

@Notification.{"textDocument/didClose"}
(c: ^Context, _: ^TextDocumentItem) {
}


Position :: struct {
    line: u32;
    character: u32;
}

Range :: struct {
    start: Position;
    end: Position;
}

Diagnostic :: struct {
    range: Range;
    message: str;
}

@Notification.{"textDocument/didChange"}
(c: ^Context, item: ^TextDocumentItem) {
    log(.Info, "Document changed, {}\n", item.textDocument.uri);
    // update_diagnostics(c);
}

@Notification.{"textDocument/didSave"}
(c: ^Context, item: ^TextDocumentItem) {
    log(.Info, "Document changed, {}\n", item.textDocument.uri);
    update_diagnostics(c, item.textDocument.uri);
}

update_diagnostics :: (c: ^Context, uri: str) {
    filename := do {
        if string.starts_with(uri, "file://") do return string.advance(uri, 7);
        return "";
    };

    errors := run_onyx_check(filename);
    defer delete(^errors);

    for ^known_files {
        if it.errors {
            it.previously_had_errors = true;
        }

        array.clear(^it.errors);
    }

    for err: errors {
        in_file := array.first(known_files, #(string.contains(it.uri, err.file)));
        if !in_file {
            known_files << .{ aprintf("file://{}", err.file) };
            in_file = array.first(known_files, #(string.contains(it.uri, err.file)));
        }

        in_file.errors << err;
    }

    for ^known_files {
        if !it.errors {
            if it.previously_had_errors {
                it.previously_had_errors = false;
                c->send_notification("textDocument/publishDiagnostics", ^.{ uri = it.uri, diagnostics = Diagnostic.[] });
            }

            continue;
        }

        diagnostics := make([..] Diagnostic);
        defer delete(^diagnostics);

        for^ err: it.errors {
            diagnostics << .{
                .{
                    .{ line = err.line - 1, character = err.start_column - 1 },
                    .{ line = err.line - 1, character = err.end_column - 1 },
                },
                err.msg
            };
        }

        c->send_notification("textDocument/publishDiagnostics", ^.{ uri = it.uri, diagnostics = diagnostics });
    }
}


TextDocumentPosition :: struct {
    textDocument: struct {
        uri: str;
    };

    position: Position;
}

TextDocumentLocation :: struct {
    uri: str;
    range: Range;
}


@Method.{"textDocument/definition"}
(c: ^Context, in: ^TextDocumentPosition, out: ^TextDocumentLocation) -> Status {
    // Need to un-zero-index the line and column
    location := lookup_symbol(.{in.textDocument.uri, in.position.line + 1, in.position.character + 1});

    if location {
        out.uri = tprintf("file://{}", location.value.filename);
        out.range.start = .{ location.value.line - 1, location.value.column - 1 };
        out.range.end   = .{ location.value.line - 1, location.value.column };

        return .Success;
    }

    return .Return_Null;
}

