use core {string, array, iter}
use core {tprintf, aprintf}
use json_rpc {
    Method,
    Context,
    Status,
    Notification
}

OnyxFile :: struct {
    uri: str;
    errors: [..] CompilationError;
    previously_had_errors: bool;
}

#local
known_files: [..] OnyxFile;
#init () {
    array.init(&known_files, 16, context.allocator);
}


TextDocumentItem :: struct {
    textDocument: struct {
        uri: str;
        languageId: str;
    };
}

@Notification.{"textDocument/didOpen"}
(c: ^Context, item: ^TextDocumentItem) {
    // :Config ??
    if item.textDocument.languageId != "onyx" do return;

    if !array.contains(known_files, [](it.uri == item.textDocument.uri)) {
        known_files << .{ string.alloc_copy(item.textDocument.uri) };
    }
}

@Notification.{"textDocument/didClose"}
(c: ^Context, _: ^TextDocumentItem) {
}


Position :: struct {
    line: u32;
    character: u32;
}

Range :: struct {
    start: Position;
    end: Position;
}

Diagnostic :: struct {
    range: Range;
    message: str;
}

@Notification.{"textDocument/didSave"}
(c: ^Context, item: ^TextDocumentItem) {
    log(.Info, tprintf("Document changed, {}\n", item.textDocument.uri));
    update_diagnostics(c, item.textDocument.uri);
}

update_diagnostics :: (c: ^Context, uri: str) {
    filename := do {
        if string.starts_with(uri, "file://") do return string.advance(uri, 7);
        return "";
    };

    errors := run_onyx_check(filename);
    defer delete(^errors);

    for ^known_files {
        if it.errors {
            it.previously_had_errors = true;
        }

        array.clear(^it.errors);
    }

    for err in errors {
        in_file := array.first(known_files, [f](string.contains(f.uri, err.file)));
        if !in_file {
            known_files << .{ aprintf("file://{}", err.file) };
            in_file = array.first(known_files, [f](string.contains(f.uri, err.file)));
        }

        in_file.errors << err;
    }

    for ^known_files {
        if !it.errors {
            if it.previously_had_errors {
                it.previously_had_errors = false;
                c->send_notification("textDocument/publishDiagnostics", ^.{ uri = it.uri, diagnostics = Diagnostic.[] });
            }

            continue;
        }

        diagnostics := make([..] Diagnostic);
        defer delete(^diagnostics);

        for &err in it.errors {
            diagnostics << .{
                .{
                    .{ line = err.line - 1, character = err.start_column - 1 },
                    .{ line = err.line - 1, character = err.end_column - 1 },
                },
                err.msg
            };
        }

        c->send_notification("textDocument/publishDiagnostics", ^.{ uri = it.uri, diagnostics = diagnostics });
    }
}


TextDocumentPosition :: struct {
    textDocument: struct {
        uri: str;
    };

    position: Position;
}

TextDocumentLocation :: struct {
    uri: str;
    range: Range;
}

#inject TextDocumentPosition {
    to_symbol_location :: (self: &TextDocumentPosition) -> SymbolLocation {
        return .{ self.textDocument.uri, self.position.line + 1, self.position.character + 1 };
    }
}


@Method.{"textDocument/definition"}
(c: ^Context, input: ^TextDocumentPosition, out: ^TextDocumentLocation) -> Status {
    // Need to un-zero-index the line and column
    location := lookup_symbol(input->to_symbol_location())->transform(get_symbol_location);

    switch location {
        case .Some as l {
            out.uri = tprintf("file://{}", l.filename);
            out.range.start = .{ l.line - 1, l.column - 1 };
            out.range.end   = .{ l.line - 1, l.column };

            return .Success;
        }

        case .None do return .Return_Null;
    }
}


ReferencesInput :: struct {
    textDocument: struct {
        uri: str;
    };

    position: Position;
    context: struct {
        includeDeclaration: bool;
    };
}

@Method.{"textDocument/references"}
(c: &Context, input: &ReferencesInput, out: &[] TextDocumentLocation) -> Status {
    locations := find_references(
        TextDocumentPosition.to_symbol_location(~~input),
        input.context.includeDeclaration
    );

    *out = iter.as_iter(locations)
        |> iter.map(loc => TextDocumentLocation.{
            uri = tprintf("file://{}", loc.filename),
            range = .{
                start = .{ loc.line - 1, loc.column - 1 },
                end = .{ loc.line - 1, loc.column },
            }
        })
        |> iter.collect();

    return .Success;
}


HoverOutput :: struct {
    contents: struct {
        kind: str;
        value: str;
    };
}

process_docs :: (docs: str) -> str {
    lines := string.split_iter(docs, "\n")
             |> iter.skip_while(x => string.empty(string.strip_whitespace(x)))
             |> iter.collect();
    
    leading_whitespace_length := lines[0].count - string.strip_whitespace(lines[0]).count;
    for &l in lines {
        string.advance(l, leading_whitespace_length);
    }

    return string.join(lines, "\n");
}

@Method.{"textDocument/hover"}
(c: &Context, input: &TextDocumentPosition, out: &HoverOutput) -> Status {
    // Need to un-zero-index the line and column
    location := lookup_symbol(input->to_symbol_location())
                ->and_then(get_symbol_docs)
                ->transform(process_docs);

    switch location {
        case .Some as docs {
            *out = .{
                contents = .{
                    kind = "markdown",
                    value = docs
                }
            };

            return .Success;
        }

        case .None do return .Return_Null;
    }
}
