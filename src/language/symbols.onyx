
use core {os, array, string, iter}
use core {eprintf, tprintf}
use runtime

refresh_symbol_registry :: (filename: str) {
    // First, flush all old memory that is not needed any more.
    if symbol_info_contents do delete(&symbol_info_contents);
    if files                do delete(&files);


    // Read in the contents of the symbol file.
    symbol_info_contents = os.get_contents(filename);
    
    // Look at the header to make sure the magic bytes are correct.
    header := cast(&Symbol_Info_Header, symbol_info_contents.data);
    if header.magic_bytes != "OSYM\x02\x00\x00\x00" {
        log(.Warning, "Bad magic bytes in OSYM file.");
        return;
    }

    // Read in the file data. This cannot be done directly like the
    // cases below, because the file data has names, which are inconsistent
    // in length.
    files = make(typeof files, header.file_def_count);

    index := header.file_def_offset;
    for header.file_def_count {
        id          := *cast(&u32, &symbol_info_contents.data[index]);
        name_length := *cast(&u32, &symbol_info_contents.data[index + 4]);
        name        := symbol_info_contents.data[index + 8 .. index + 8 + name_length];

        // Replace '\' as '/' (for Windows)
        for &n in name {
            if *n == '\\' do *n = '/';
        }

        files[it] = .{id, name};

        index += 8 + name_length;
    }
    
    // Sort the files by ID, since this is currently not guaranteed.
    array.sort(files, (x, y) => x.id - y.id);

    // Simply point the symbol definition and resolution tables to the file data,
    // since there is no additional processing to do.
    symbol_definitions.data = ~~ &symbol_info_contents[header.symbol_def_offset];
    symbol_definitions.count = header.symbol_def_count;

    symbol_resolutions.data = ~~ &symbol_info_contents[header.symbol_res_offset];
    symbol_resolutions.count = header.symbol_res_count;

    symbol_docs.data = ~~ &symbol_info_contents[header.docs_offset];
    symbol_docs.count = header.docs_length;
}



SymbolLocation :: struct {
    filename: str;
    line, column: u32;
}

lookup_symbol :: (location: SymbolLocation) -> ? Symbol_Definition {
    log(.Debug, tprintf("Looking up: {}\n", location));

    // :NotURI
    file_def := array.first(files, [](string.equal_insensitive(location.filename, it.name)));
    if !file_def do return .None;

    file_id := file_def.id;
    tmp_symbol_resolution := Symbol_Resolution.{file_id, location.line, location.column};

    // Binary search over symbol resolution data to find matching entry.
    top := symbol_resolutions.count - 1;
    bottom := 0;

    index: i32;
    found := false;
    while top >= bottom {
        index = (top - bottom) / 2 + bottom;

        comp := Symbol_Resolution.compare_loose(
            tmp_symbol_resolution,
            symbol_resolutions[index]
        );

        if comp == 0 {
            found = true;
            break;
        }

        if comp < 0 {
            top = index - 1;
        }

        if comp > 0 {
            bottom = index + 1;
        }
    }

    if !found {
        log(.Info, "Symbol not found");
        return .{};
    }

    sym_res := &symbol_resolutions[index];
    if sym_res.line != location.line do return .{};
    if sym_res.column <= location.column && location.column <= sym_res.column + sym_res.length {
        sym_def := &symbol_definitions[sym_res.symbol_id];
        assert(sym_res.symbol_id == sym_def.symbol_id, "Expected symbol id's to match");

        return *sym_def;
    }

    return .{};
}

get_symbol_location :: (sym_def: Symbol_Definition) -> SymbolLocation {
    result_filename := files[sym_def.file_id].name;

    return SymbolLocation.{
        result_filename,
        sym_def.line,
        sym_def.column
    };
}

get_symbol_docs :: (sym_def: Symbol_Definition) -> ? str {
    if sym_def.docs_length == 0 do return .{};

    start := sym_def.docs_offset;
    end   := start + sym_def.docs_length;
    return symbol_docs[start .. end];
}

find_references :: (location: SymbolLocation, include_declaration := false) -> [] SymbolLocation {
    file_def := array.first(files, [](string.contains(location.filename, it.name)));
    if !file_def do return .[];

    possible_symbols := iter.as_iter(symbol_definitions)
        |> iter.filter((def, [file_def, location]) =>
            def.file_id == file_def.id &&
            def.line == location.line &&
            def.column < location.column
        )
        |> iter.collect()
        |> array.sort((x, y) => y.column - x.column);

    if !possible_symbols do return .[];

    sym    := possible_symbols[0];
    sym_id := sym.symbol_id;
    results := iter.as_iter(symbol_resolutions)
        |> iter.filter((res, [sym_id]) => res.symbol_id == sym_id)
        |> iter.map(res => SymbolLocation.{
            files[res.file_id].name,
            res.line,
            res.column
        });
    
    if include_declaration {
        results = iter.concat(
            iter.single(SymbolLocation.{
                files[sym.file_id].name,
                sym.line,
                sym.column
            }),
            results
        );
    }

    return results->collect();
}


#local {
    Symbol_Info_Header :: struct {
        magic_bytes: [8] u8;

        file_def_offset: u32;
        file_def_count:  u32;

        symbol_def_offset: u32;
        symbol_def_count:  u32;

        symbol_res_offset: u32;
        symbol_res_count:  u32;

        docs_offset: u32;
        docs_length: u32;
    }

    File_Definition :: struct {
        id: i32;
        name: str;
    }

    Symbol_Definition :: struct {
        symbol_id: u32;
        file_id: i32;
        line: i32;
        column: u32;

        docs_offset: u32;
        docs_length: u32;
    }

    Symbol_Resolution :: struct {
        file_id: i32;
        line: i32;
        column: i32;
        length: u32;
        symbol_id: u32;
    }

    Symbol_Resolution.compare :: (x, y: Symbol_Resolution) -> i32 {
        if x.file_id != y.file_id do return x.file_id - y.file_id;
        if x.line != y.line do return x.line - y.line;
        return x.column - y.column;
    }

    Symbol_Resolution.compare_loose :: (needle, haystack: Symbol_Resolution) -> i32 {
        if needle.file_id != haystack.file_id do return needle.file_id - haystack.file_id;
        if needle.line != haystack.line do return needle.line - haystack.line;

        if needle.column >= haystack.column && needle.column < haystack.column + haystack.length {
            return 0;
        }

        return needle.column - haystack.column;
    }

    symbol_info_contents: [] u8

    files: [] File_Definition
    symbol_definitions: [] Symbol_Definition
    symbol_resolutions: [] Symbol_Resolution
    symbol_docs:        [] u8
}


