
use core {tprintf}
use core {random, string, os, io, conv}
use core.encoding {json}

CompilationError :: struct {
    file: str;
    line: u32;
    start_column: u32;
    end_column: u32;
    msg: str;
}

run_onyx_check :: (filename: str) -> [] CompilationError {
    logf(.Debug, "Checking ({})", filename);

    internal_symbol_file_name := tprintf(".onyx_lsp_output_{}", random.between(0, 5000));
    symbol_file_name := os.path_join(global_config.lsp.workingDir, internal_symbol_file_name);
    defer if os.file_exists(symbol_file_name) {
        os.remove_file(symbol_file_name);
    }

    // :Config
    use args := Array.make(.[
        "check",
        "--no-colors", "--no-stale-code",
        "--lspinfo", internal_symbol_file_name,
        "--error-format", "json",
        "-r", global_config.lsp.runtime
    ]);

    for global_config.lsp.args {
        args << it;
    }

    for string.split_iter(global_config.lsp.includeDirs, ' ') {
        args << "-I";
        args << it;
    }

    switch global_config.lsp.mode {
        case "project" {
            args->concat(string.split_iter(global_config.lsp.onyxFiles, ' '));
        }

        case "file" {
            args << filename;
        }
    }

    proc := os.process_spawn("onyx", args, starting_directory=global_config.lsp.workingDir);

    use r := io.Reader.make(&proc);
    use output := r->read_all();
    errors := make([..] CompilationError);

    if os.process_wait(&proc) == .Success {
        refresh_symbol_registry(symbol_file_name);
        return errors;
    }

    use error_obj := json.decode_with_result(output)->or_return(errors);

    for err in error_obj.root->as_array_iter() {
        e: CompilationError;
        e.file         = err["file"]->as_str()->temp_copy();
        e.line         = ~~err["line"]->as_int();
        e.start_column = ~~err["column"]->as_int();
        e.end_column   = e.start_column + ~~err["length"]->as_int();
        e.msg          = err["msg"]->as_str()->temp_copy();

        errors->push(e);
    }

    logf(.Info, "Errors: {}", errors);

    return errors;
}
