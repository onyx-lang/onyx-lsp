
use core

CompilationError :: struct {
    file: str;
    line: u32;
    start_column: u32;
    end_column: u32;
    msg: str;
}

run_onyx_check :: (filename: str) -> [] CompilationError {
    temporary_file_name := tprintf("/tmp/onyx_lsp_{}", random.between(0, 5000));
    defer if os.file_exists(temporary_file_name) {
        os.remove_file(temporary_file_name);
    }

    // :Config
    args := array.make(.["check", "--no-colors", "--syminfo", temporary_file_name]);
    defer delete(^args);

    for string.split_iter(global_config.lsp.includeDirs, #char " ") {
        args << "-I";
        args << it;
    }

    switch global_config.lsp.mode {
        case "project" {
            array.concat(^args, string.split_iter(global_config.lsp.onyxFiles, #char " "));
        }

        case "file" {
            args << filename;
        }
    }

    proc := os.process_spawn("onyx", args, starting_directory=global_config.lsp.workingDir);

    r := io.reader_make(^proc);
    output := r->read_all();

    original_output := output;
    defer if original_output do delete(^original_output);

    errors := make([..] CompilationError);

    if os.process_wait(^proc) == .Success {
        refresh_symbol_registry(temporary_file_name);
    
        return errors;
    }

    while output {
        line, output' := string.bisect(output, #char "\n");

        if string.starts_with(line, "(") {
            string.advance(^line, 1);
            filename := string.temp_copy(string.read_until(^line, #char ":"));

            string.advance(^line, 1);
            line_number := conv.parse_int(^line);

            string.advance(^line, 1);
            col := conv.parse_int(^line);

            string.advance(^line, 2);
            msg := string.temp_copy(string.strip_whitespace(line));

            _, output' := string.bisect(output, #char "\n");
            underline_line, output' := string.bisect(output, #char "\n");

            string.strip_whitespace(^underline_line);

            errors << .{
                filename, ~~line_number, ~~col, ~~col + underline_line.count, msg
            };
        }
    }

    return errors;
}

