package main

use core {string, iter, conv}

uri_decode :: (uri: str) -> str {
    a := urldecode(uri);
    
    if string.starts_with(a, "file://") {
        string.advance(&a, "file://".count);
    }

    if a[0] == '/' && a[2] == ':' {
        string.advance(&a, 1);
    }

    return a;
}

uri_encode :: (s: str, allocator := context.allocator) -> str {
    result := make(dyn_str, allocator);
    string.append(&result, "file://");

    if s[1] == ':' {
        string.append(&result, "/");
    }

    string.append(&result, urlencode(s, allocator));
    return result;
}


//
// Yoinked from onyx-lang/pkg-http-server
//
urlencode :: (s: str, allocator := context.allocator) -> str {
    out := make([..] u8, s.count, allocator=allocator);

    for ch in s do switch ch {
        //
        // This list was taken from:
        // https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding
        match(':', "%3A");
        match('/', "%2F");
        match('?', "%3F");
        match('#', "%23");
        match('[', "%5B");
        match(']', "%5D");
        match('@', "%40");
        match('!', "%21");
        match('$', "%24");
        match('&', "%26");
        match(#char "'", "%27");
        match('(', "%28");
        match(')', "%29");
        match('*', "%2A");
        match('+', "%2B");
        match(',', "%2C");
        match(';', "%3B");
        match('<', "%3C");
        match('=', "%3D");
        match('>', "%3E");
        match('%', "%25");
        match(' ', "%20");
        match('"', "%22");

        case #default do out << ch;

        match :: macro (from: u8, to: str) {
            //
            // How's this for a one-liner
            case from do for to do out << it;
        }
    }

    return out;
}

urldecode :: (s: str, allocator := context.allocator) -> str {
    out := make([..] u8, s.count, allocator=allocator);

    i := iter.as_iter(s);
    defer iter.close(i);

    for #no_close ch in i {
        if ch == '%' {
            a := iter.next(i) ?? 0;
            b := iter.next(i) ?? 0;

            n := u8.[a, b];

            v := conv.str_to_i64(n, base=16);
            switch v {
                match(0x3A, ':');
                match(0x2F, '/');
                match(0x3F, '?');
                match(0x23, '#');
                match(0x5B, '[');
                match(0x5D, ']');
                match(0x40, '@');
                match(0x21, '!');
                match(0x24, '$');
                match(0x26, '&');
                match(0x27, #char "'");
                match(0x28, '(');
                match(0x29, ')');
                match(0x2A, '*');
                match(0x2B, '+');
                match(0x2C, ',');
                match(0x3B, ';');
                match(0x3C, '<');
                match(0x3D, '=');
                match(0x3E, '>');
                match(0x25, '%');
                match(0x20, ' ');
                match(0x22, '"');

                match :: macro (from: i64, to: u8) {
                    case from do out << to;
                }
            }

        } elseif ch == '+' {
            out << ' ';
        } else {
            out << ch;
        }
    }

    return out;
}

